<script>
function loadXMLString(text)
{
	var xmlDoc;
	try //Internet Explorer
  	{
	  xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
	  xmlDoc.async="false";
	  xmlDoc.loadXML(text);
  	}
	catch(e)
  	{
	  	try // Firefox, Mozilla, Opera, etc.
	    {
		    parser=new DOMParser();
		    xmlDoc=parser.parseFromString(text,"text/xml");
	    }
	  	catch(e)
	    {
		    alert(e.message);
		    return;
	    }
		
		return xmlDoc;
  	}
}
	
function createRequestObject() 
{
    var tmpXmlHttpObject;
    if (window.XMLHttpRequest) 
    { 
        tmpXmlHttpObject = new XMLHttpRequest();
    } 
    else if (window.ActiveXObject) 
    { 
        tmpXmlHttpObject = new ActiveXObject('Microsoft.XMLHTTP');
    }
 
    return tmpXmlHttpObject;
}

//smart date
function getSmartDate(txtDate)
{

	var rawText = txtDate.value;
	if (rawText=='') return 0;
	
	var currentTime = new Date();
	var currentDate = currentTime.getDate();
	var currentMonth = currentTime.getMonth();
	
	var currentYear = currentTime.getFullYear();
	var smartDate;
	switch(rawText.length)
	{
		case 1:
			smartDate =  currentYear+'-'+currentMonth+'-'+rawText;
			break;
		case 2:
			smartDate =   currentYear+'-'+currentMonth+'-'+rawText;
			break;
		
		case 3: 
			if ( rawText.substr(0,2)<=31 ) 
				smartDate =   currentYear+'-'+rawText.substr(2,1)+'-'+rawText.substr(0,2);
			else if( rawText.substr(1,2)<=12 ) //get the firswt letter to make date
				smartDate =   currentYear+'-'+rawText.substr(1,2)+'-'+rawText.substr(0,1);
			else
				smartDate = rawText;		
			break;
		case 4: 
			smartDate =  currentYear+'-'+rawText.substr(2,2)+'-'+rawText.substr(0,2);	
			break;
		case 5: 
			smartDate =  rawText;	
			break;
		case 6: 
			if ( rawText.substr(4,2)>=20 )
			smartDate = '19'+rawText.substr(4,2)+'-'+rawText.substr(2,2)+'-'+rawText.substr(0,2);
			else
			smartDate = '20'+rawText.substr(4,2)+'-'+rawText.substr(2,2)+'-'+rawText.substr(0,2);
			break;
		case 7: 
			smartDate =  rawText;	
			break;	
		case 8: 
			smartDate =  rawText.substr(4,4)+'-'+rawText.substr(2,2)+'-'+rawText.substr(0,2);	
			break;
		case 9: 
			smartDate =  rawText;	
			break;
		case 10: 
			smartDate =  rawText;	
			break;			
	}
	
	
	if (isDate(smartDate)==false)
	{
		//alert('Can not be a date');
		txtDate.focus();
	}
	else
		txtDate.value = mysql2java(smartDate);	

}

function mysql2java(mysqldate)
{
	da = mysqldate.split('-');	
	return (da[2]+'/'+da[1]+'/'+da[0]); // ngay /thang/ nam

}
function java2mysql(javadate)
{
	da = javadate.split('/');	
	return (da[2]+'-'+da[1]+'-'+da[0]); // ngay /thang/ nam
}

/**
 * DHTML date validation script. Courtesy of SmartWebby.com (http://www.smartwebby.com/dhtml/)
 */
// Declaring valid date character, minimum year and maximum year
var dtCh= '-';
var minYear=1900;
var maxYear=2100;

function isInteger(s)
{
	var i;
    for (i = 0; i < s.length; i++)
    {   
        // Check that current character is number.
        var c = s.charAt(i);
        if (((c < '0') || (c > '9'))) return false;
    }
    // All characters are numbers.
    return true;
}

function stripCharsInBag(s, bag)
{
	var i;
    var returnString = '';
    // Search through string's characters one by one.
    // If character is not in bag, append to returnString.
    for (i = 0; i < s.length; i++)
    {   
        var c = s.charAt(i);
        if (bag.indexOf(c) == -1) returnString += c;
    }
    return returnString;
}

function daysInFebruary (year)
{
	// February has 29 days in any year evenly divisible by four,
    // EXCEPT for centurial years which are not also divisible by 400.
    return (((year % 4 == 0) && ( (!(year % 100 == 0)) || (year % 400 == 0))) ? 29 : 28 );
}
function DaysArray(n) 
{
	for (var i = 1; i <= n; i++) 
	{
		this[i] = 31
		if (i==4 || i==6 || i==9 || i==11) {this[i] = 30}
		if (i==2) {this[i] = 29}
   } 
   return this
}

function isDate(dtStr)
{
	var daysInMonth = DaysArray(12)
	var pos1=dtStr.indexOf(dtCh)
	var pos2=dtStr.indexOf(dtCh,pos1+1)
	var strYear=dtStr.substring(0,pos1)
	var strMonth=dtStr.substring(pos1+1,pos2)
	var strDay=dtStr.substring(pos2+1)
	
	strYr=strYear
	if (strDay.charAt(0)=='0' && strDay.length>1) strDay=strDay.substring(1)
	if (strMonth.charAt(0)=='0' && strMonth.length>1) strMonth=strMonth.substring(1)
	for (var i = 1; i <= 3; i++) 
	{
		if (strYr.charAt(0)=='0' && strYr.length>1) strYr=strYr.substring(1)
	}
	month=parseInt(strMonth)
	day=parseInt(strDay)
	year=parseInt(strYr)
	if (pos1==-1 || pos2==-1)
	{
		//alert('The date format should be : dd/mm/yyyy')
		return false
	}
	if (strMonth.length<1 || month<1 || month>12)
	{
		//alert('Please enter a valid month')
		return false
	}
	if (strDay.length<1 || day<1 || day>31 || (month==2 && day>daysInFebruary(year)) || day > daysInMonth[month])
	{
		//alert('Please enter a valid day')
		return false
	}
	if (strYear.length != 4 || year==0 || year<minYear || year>maxYear)
	{
		//alert('Please enter a valid 4 digit year between '+minYear+' and '+maxYear)
		return false
	}
	if (dtStr.indexOf(dtCh,pos2+1)!=-1 || isInteger(stripCharsInBag(dtStr, dtCh))==false)
	{
		//alert('Please enter a valid date')
		return false
	}
	return true
}

//trim
function ltrim(str) 
{ 
	for(var k = 0; k < str.length && isWhitespace(str.charAt(k)); k++);
	return str.substring(k, str.length);
}
function rtrim(str) 
{
	for(var j=str.length-1; j>=0 && isWhitespace(str.charAt(j)) ; j--) ;
	return str.substring(0,j+1);
}
function trim(str) 
{
	return ltrim(rtrim(str));
}
function isWhitespace(charToCheck) 
{
	var whitespaceChars = ' ';
	return (whitespaceChars.indexOf(charToCheck) != -1);
}



<!-- Original:  Ronnie T. Moore -->
<!-- Web Site:  The JavaScript Source -->

<!-- This script and many more are available free online at -->
<!-- The JavaScript Source!! http://javascript.internet.com -->

<!-- Begin

nextfield = ''; // name of first box on page
netscape = '';
typehead = '';
formname = '';

ver = navigator.appVersion; len = ver.length;
for(iln = 0; iln < len; iln++) if (ver.charAt(iln) == '(') break;
netscape = (ver.charAt(iln+1).toUpperCase() != 'C');

function keyDown(DnEvents) 
{ // handles keypress
// determines whether Netscape or Internet Explorer
	k = (netscape) ? DnEvents.which : window.event.keyCode;
	if (k == 13) 
	{ // enter key pressed
		if (nextfield != '') 
		{ // we're not done yet, send focus to next box
			//if (document.getElementById(nextfield) != null)	document.getElementById(nextfield).focus();
			var str = 'document.'+formname + '.' + nextfield;
			if (eval(str) != null)	eval(str).focus();
		}
		
		//alert(typehead);
		if (typehead == '')
		{	
			return true; // submit, we finished all fields
		}
		else 
		{ // we're not done yet, send focus to next box
		
			typehead_id = document.getElementById('cbo'+typehead).value;
			typehead_node = document.getElementById('cbo'+typehead).options[document.getElementById('cbo'+typehead).selectedIndex].text;
			
			eval('select'+typehead)(typehead_id, typehead_node);
			
			return true;
		  }
	 }
}
document.onkeydown = keyDown; // work together to analyze keystrokes
if (netscape) document.captureEvents(Event.KEYDOWN|Event.KEYUP);
//  End -->


//this script to collapse all popup form

var onpopup = 0;
document.onclick = collapse;

function collapse()
{
	if (onpopup != 1)
	{
		if (document.getElementById('divward') != null) document.getElementById('divward').style.display = 'none';
		if (document.getElementById('divicd') != null) document.getElementById('divicd').style.display = 'none';
		if (document.getElementById('divprescriptiontemplate') != null) document.getElementById('divprescriptiontemplate').style.display = 'none';
		if (document.getElementById('divencounter' ) != null)document.getElementById('divencounter').style.display = 'none';
		if (document.getElementById('divward' ) != null) document.getElementById('divward' ).style.display = 'none';
		if (document.getElementById('divprovince' ) != null) document.getElementById('divprovince' ).style.display = 'none';
		if (document.getElementById('divclient' ) != null) document.getElementById('divclient' ).style.display = 'none';
		if (document.getElementById('divdruginvoice' ) != null) document.getElementById('divdruginvoice' ).style.display = 'none';
		if (document.getElementById('divicd' ) != null) document.getElementById('divicd' ).style.display = 'none';
		if (document.getElementById('divprovider' ) != null) document.getElementById('divprovider' ).style.display = 'none';
		if (document.getElementById('divimportinvoice' ) != null) document.getElementById('divimportinvoice' ).style.display = 'none';
		if (document.getElementById('divdrug' ) != null) document.getElementById('divdrug' ).style.display = 'none';
		if (document.getElementById('divservice' ) != null) document.getElementById('divservice' ).style.display = 'none';
		if (document.getElementById('divserpackage' ) != null) document.getElementById('divserpackage' ).style.display = 'none';
		if (document.getElementById('divreceipt' ) != null) document.getElementById('divreceipt' ).style.display = 'none';
		if (document.getElementById('divdepartment' ) != null) document.getElementById('divdepartment' ).style.display = 'none';
		if (document.getElementById('divservicegroup' ) != null) document.getElementById('divservicegroup' ).style.display = 'none';
		if (document.getElementById('divdistrict' ) != null) document.getElementById('divdistrict' ).style.display = 'none';
		if (document.getElementById('divdepartment' ) != null) document.getElementById('divdepartment' ).style.display = 'none';
		if (document.getElementById('divdepartment' ) != null) document.getElementById('divdepartment' ).style.display = 'none';


	}
	onpopup = 0;
}

function formatDate(str)
{
	var strsplit = str.split(" ");
	return strsplit[0];

}


var http = createRequestObject();

</script>

<SCRIPT LANGUAGE="JavaScript"> //Common functions for all dropdowns

 
  function fnKeyDownHandler(getdropdown, e)
  {
    fnSanityCheck(getdropdown);

    // Press [ <- ] and [ -> ] arrow keys on the keyboard to change alignment/flow.
    // ...go to Start : Press  [ <- ] Arrow Key
    // ...go to End : Press [ -> ] Arrow Key
    // (this is useful when the edited-text content exceeds the ListBox-fixed-width)
    // This works best on Internet Explorer, and not on Netscape

    var vEventKeyCode = FindKeyCode(e);

    // Press left/right arrow keys
    if(vEventKeyCode == 37)
    {
    fnLeftToRight(getdropdown);
    }
    if(vEventKeyCode == 39)
    {
    fnRightToLeft(getdropdown);
    }

    // Delete key pressed
    if(vEventKeyCode == 46)
    {
    fnDelete(getdropdown);
    }

    // backspace key pressed
    if(vEventKeyCode == 8 || vEventKeyCode==127)
    {
    if(e.which) //Netscape
    {
      //e.which = ''; //this property has only a getter.
    }
    else //Internet Explorer
    {
      //To prevent backspace from activating the -Back- button of the browser
      e.keyCode = '';
      if(window.event.keyCode)
      {
      window.event.keyCode = '';
      }
    }
    return true;
    }

    // Tab key pressed, use code below to reorient to Left-To-Right flow, if needed
    //if(vEventKeyCode == 9)
    //{
    //  fnLeftToRight(getdropdown);
    //}
  }

  function fnLeftToRight(getdropdown)
  {
    getdropdown.style.direction = "ltr";
  }

  function fnRightToLeft(getdropdown)
  {
    getdropdown.style.direction = "rtl";
  }

  function fnDelete(getdropdown)
  {
    if(getdropdown.options.length != 0)
    // if dropdown is not empty
    {
    if (getdropdown.options.selectedIndex == vEditableOptionIndex_A)
    // if option the Editable field
    {
      getdropdown.options[getdropdown.options.selectedIndex].text = '';
      getdropdown.options[getdropdown.options.selectedIndex].value = '';
    }
    }
  }


  /*
  Since Internet Explorer and Netscape have different
  ways of returning the key code, displaying keys
  browser-independently is a bit harder.
  However, you can create a script that displays keys
  for either browser.
  The following function will display each key
  in the status line:

  The "FindKey.." function receives the "event" object
  from the event handler and stores it in the variable "e".
  It checks whether the "e.which" property exists (for Netscape),
  and stores it in the "keycode" variable if present.
  Otherwise, it assumes the browser is Internet Explorer
  and assigns to keycode the "e.keyCode" property.
  */

  function FindKeyCode(e)
  {
    if(e.which)
    {
    keycode=e.which;  //Netscape
    }
    else
    {
    keycode=e.keyCode; //Internet Explorer
    }

    //alert("FindKeyCode"+ keycode);
    return keycode;
  }

  function FindKeyChar(e)
  {
    keycode = FindKeyCode(e);
    if((keycode==8)||(keycode==127))
    {
    character="backspace"
    }
    else if((keycode==46))
    {
    character="delete"
    }
    else
    {
    character=String.fromCharCode(keycode);
    }
    //alert("FindKey"+ character);
    return character;
  }

  function fnSanityCheck(getdropdown)
  {
    if(vEditableOptionIndex_A>(getdropdown.options.length-1))
    {
    alert("PROGRAMMING ERROR: The value of variable vEditableOptionIndex_... cannot be greater than (length of dropdown - 1)");
    return false;
    }
  }
</SCRIPT>

<SCRIPT LANGUAGE="JavaScript"> //Dropdown specific functions, which manipulate dropdown specific global variables

  /*----------------------------------------------
  Dropdown specific global variables are:
  -----------------------------------------------
  1) vEditableOptionIndex_A   --> this needs to be set by Programmer!! See explanation.
  2) vEditableOptionText_A    --> this needs to be set by Programmer!! See explanation.
  3) vPreviousSelectIndex_A
  4) vSelectIndex_A
  5) vSelectChange_A

  --------------------------- Subrata Chakrabarty */

  /*----------------------------------------------
  The dropdown specific functions
  (which manipulate dropdown specific global variables)
  used by all dropdowns are:
  -----------------------------------------------
  1) function fnChangeHandler_A(getdropdown)
  2) function fnKeyPressHandler_A(getdropdown, e)
  3) function fnKeyUpHandler_A(getdropdown, e)

  --------------------------- Subrata Chakrabarty */

  /*------------------------------------------------
  IMPORTANT: Global Variable required to be SET by programmer
  -------------------------- Subrata Chakrabarty  */

  var vEditableOptionIndex_A = 0;

  // Give Index of Editable option in the dropdown.
  // For eg.
  // if first option is editable then vEditableOptionIndex_A = 0;
  // if second option is editable then vEditableOptionIndex_A = 1;
  // if third option is editable then vEditableOptionIndex_A = 2;
  // if last option is editable then vEditableOptionIndex_A = (length of dropdown - 1).
  // Note: the value of vEditableOptionIndex_A cannot be greater than (length of dropdown - 1)

  var vEditableOptionText_A = "--?--";

  // Give the default text of the Editable option in the dropdown.
  // For eg.
  // if the editable option is <option ...>--?--</option>,
  // then set vEditableOptionText_A = "--?--";

  /*------------------------------------------------
  Global Variables required for
  fnChangeHandler_A(), fnKeyPressHandler_A() and fnKeyUpHandler_A()
  for Editable Dropdowns
  -------------------------- Subrata Chakrabarty  */

  var vPreviousSelectIndex_A = 0;
  // Contains the Previously Selected Index, set to 0 by default

  var vSelectIndex_A = 0;
  // Contains the Currently Selected Index, set to 0 by default

  var vSelectChange_A = 'MANUAL_CLICK';
  // Indicates whether Change in dropdown selected option
  // was due to a Manual Click
  // or due to System properties of dropdown.

  // vSelectChange_A = 'MANUAL_CLICK' indicates that
  // the jump to a non-editable option in the dropdown was due
  // to a Manual click (i.e.,changed on purpose by user).

  // vSelectChange_A = 'AUTO_SYSTEM' indicates that
  // the jump to a non-editable option was due to System properties of dropdown
  // (i.e.,user did not change the option in the dropdown;
  // instead an automatic jump happened due to inbuilt
  // dropdown properties of browser on typing of a character )

  /*------------------------------------------------
  Functions required for  Editable Dropdowns
  -------------------------- Subrata Chakrabarty  */

  function fnChangeHandler_A(getdropdown)
  {
    fnSanityCheck(getdropdown);

    vPreviousSelectIndex_A = vSelectIndex_A;
    // Contains the Previously Selected Index

    vSelectIndex_A = getdropdown.options.selectedIndex;
    // Contains the Currently Selected Index

    if ((vPreviousSelectIndex_A == (vEditableOptionIndex_A)) && (vSelectIndex_A != (vEditableOptionIndex_A))&&(vSelectChange_A != 'MANUAL_CLICK'))
    // To Set value of Index variables - Subrata Chakrabarty
    {
      getdropdown[(vEditableOptionIndex_A)].selected=true;
      vPreviousSelectIndex_A = vSelectIndex_A;
      vSelectIndex_A = getdropdown.options.selectedIndex;
      vSelectChange_A = 'MANUAL_CLICK';
      // Indicates that the Change in dropdown selected
      // option was due to a Manual Click
    }
  }

  function fnKeyPressHandler_A(getdropdown, e)
  {
    fnSanityCheck(getdropdown);

    keycode = FindKeyCode(e);
    keychar = FindKeyChar(e);

    // Check for allowable Characters
    // The various characters allowable for entry into Editable option..
    // may be customized by minor modifications in the code (if condition below)
    // (you need to know the keycode/ASCII value of the  character to be allowed/disallowed.
    // - Subrata Chakrabarty

    if ((keycode>47 && keycode<59)||(keycode>62 && keycode<127) ||(keycode==32))
    {
      var vAllowableCharacter = "yes";
    }
    else
    {
      var vAllowableCharacter = "no";
    }

    //alert(window); alert(window.event);

    if(getdropdown.options.length != 0)
    // if dropdown is not empty
      if (getdropdown.options.selectedIndex == (vEditableOptionIndex_A))
      // if selected option the Editable option of the dropdown
      {

        var vEditString = getdropdown[vEditableOptionIndex_A].value;

        // make Editable option Null if it is being edited for the first time
        if((vAllowableCharacter == "yes")||(keychar=="backspace"))
        {
          if (vEditString == vEditableOptionText_A)
            vEditString = "";
        }
        if (keychar=="backspace")
        // To handle backspace - Subrata Chakrabarty
        {
          vEditString = vEditString.substring(0,vEditString.length-1);
          // Decrease length of string by one from right

          vSelectChange_A = 'MANUAL_CLICK';
          // Indicates that the Change in dropdown selected
          // option was due to a Manual Click

        }
        //alert("EditString2:"+vEditString);

        if (vAllowableCharacter == "yes")
        // To handle addition of a character - Subrata Chakrabarty
        {
          vEditString+=String.fromCharCode(keycode);
          // Concatenate Enter character to Editable string

          // The following portion handles the "automatic Jump" bug
          // The "automatic Jump" bug (Description):
          //   If a alphabet is entered (while editing)
          //   ...which is contained as a first character in one of the read-only options
          //   ..the focus automatically "jumps" to the read-only option
          //   (-- this is a common property of normal dropdowns
          //    ..but..is undesirable while editing).

          var i=0;
          var vEnteredChar = String.fromCharCode(keycode);
          var vUpperCaseEnteredChar = vEnteredChar;
          var vLowerCaseEnteredChar = vEnteredChar;


          if(((keycode)>=97)&&((keycode)<=122))
          // if vEnteredChar lowercase
            vUpperCaseEnteredChar = String.fromCharCode(keycode - 32);
            // This is UpperCase


          if(((keycode)>=65)&&((keycode)<=90))
          // if vEnteredChar is UpperCase
            vLowerCaseEnteredChar = String.fromCharCode(keycode + 32);
            // This is lowercase

          if(e.which) //For Netscape
          {
            // Compare the typed character (into the editable option)
            // with the first character of all the other
            // options (non-editable).

            // To note if the jump to the non-editable option was due
            // to a Manual click (i.e.,changed on purpose by user)
            // or due to System properties of dropdown
            // (i.e.,user did not change the option in the dropdown;
            // instead an automatic jump happened due to inbuilt
            // dropdown properties of browser on typing of a character )

            for (i=0;i<=(getdropdown.options.length-1);i++)
            {
              if(i!=vEditableOptionIndex_A)
              {
                var vReadOnlyString = getdropdown[i].value;
                var vFirstChar = vReadOnlyString.substring(0,1);
                if((vFirstChar == vUpperCaseEnteredChar)||(vFirstChar == vLowerCaseEnteredChar))
                {
                  vSelectChange_A = 'AUTO_SYSTEM';
                  // Indicates that the Change in dropdown selected
                  // option was due to System properties of dropdown
                  break;
                }
                else
                {
                  vSelectChange_A = 'MANUAL_CLICK';
                  // Indicates that the Change in dropdown selected
                  // option was due to a Manual Click
                }
              }
            }
          }
        }

        // Set the new edited string into the Editable option
        getdropdown.options[vEditableOptionIndex_A].text = vEditString;
        getdropdown.options[vEditableOptionIndex_A].value = vEditString;

        return false;
      }
    return true;
  }

  function fnKeyUpHandler_A(getdropdown, e)
  {
    fnSanityCheck(getdropdown);

    if(e.which) // Netscape
    {
      if(vSelectChange_A == 'AUTO_SYSTEM')
      {
        // if editable dropdown option jumped while editing
        // (due to typing of a character which is the first character of some other option)
        // then go back to the editable option.
        getdropdown[(vEditableOptionIndex_A)].selected=true;
      }

      var vEventKeyCode = FindKeyCode(e);
      // if [ <- ] or [ -> ] arrow keys are pressed, select the editable option
      if((vEventKeyCode == 37)||(vEventKeyCode == 39))
      {
        getdropdown[vEditableOptionIndex_A].selected=true;
      }
    }
  }

/*-------------------------------------------------------------------------------------------- Subrata Chakrabarty */

</SCRIPT>  <!--end of script for dropdown lstDropDown_A -->



